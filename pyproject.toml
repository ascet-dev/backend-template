[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["web", "models", "services", "settings"]
exclude = ["tests*", "alembic*", "logs*"]

[project]
name = "my-fitness"
version = "0.1.0"
requires-python = ">=3.11"

dependencies = [
    # Core framework
    "adc-webkit@ git+https://github.com/ascet-dev/adc-webkit.git@main",
    "adc-appkit@ git+https://github.com/ascet-dev/adc-appkit.git@main",
    "adc-logger@ git+https://github.com/ascet-dev/adc-logger.git@main",
    "adc-aiopg@ git+https://github.com/ascet-dev/adc-aiopg.git@main",
    "adc-aios3@ git+https://github.com/ascet-dev/adc-aios3.git@main",
    # Settings and validation
    "pydantic-settings>=2.2.0",
    # Utilities
    "click>=8.1.7",
    # HTTP client
    "aiohttp>=3.9.0",
    "httpx>=0.27.0",
    # JWT
    "PyJWT>=2.8.0",
    # Database
    "psycopg2-binary>=2.9.0",
    "sqlalchemy-utils>=0.41.0",
    # Monitoring
    "sentry-sdk>=2.26.1",
    # CLI
    "uvloop>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.2",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.7.0",
    "coverage[toml]>=7.9.1",
    "black>=25.1.0",
    "isort>=6.0.1",
    "ruff>=0.12.1",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "bandit>=1.8.5",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "black>=25.9.0",
    "isort>=6.0.1",
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "ruff>=0.13.1",
]

# Tool configurations
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | \.ruff_cache
  | build
  | dist
  | logs
  | tmp
  | alembic
  | \*\.egg-info
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
skip = [
    ".git",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "logs",
    "tmp",
    "alembic",
    "*.egg-info",
]

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "PLR", # pylint refactor
    "PLW", # pylint warnings
    "PLE", # pylint errors
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "S101", # use of assert detected
    "S603", # subprocess call - check for execution of untrusted input
    "S607", # starting a process with a partial executable path
    "RET502", # do not implicitly return None in function able to return non-None value
    "RET503", # missing explicit return at end of function able to return non-None value
    "RET504", # missing explicit return at end of function able to return non-None value
    "D100", # missing docstring in public module
    "D101", # missing docstring in public class
    "D102", # missing docstring in public method
    "D103", # missing docstring in public function
    "D104", # missing docstring in public package
    "D105", # missing docstring in magic method
    "D106", # missing docstring in public nested class
    "D107", # missing docstring in __init__
    "D200", # one-line docstring should fit on one line
    "D201", # no blank lines allowed before function docstring
    "D202", # no blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D204", # 1 blank line required after class docstring
    "D205", # 1 blank line required between summary line and description
    "D206", # docstring should be indented with spaces, not tabs
    "D207", # docstring is under-indented
    "D208", # docstring is over-indented
    "D209", # multi-line docstring closing quotes should be on a separate line
    "D210", # no whitespaces allowed surrounding docstring text
    "D211", # no blank lines allowed before class docstring
    "D212", # multi-line docstring summary should start at the first line
    "D213", # multi-line docstring summary should start at the second line
    "D214", # section is over-indented
    "D215", # section underline is over-indented
    "D301", # use r""" if any backslashes in a docstring
    "D400", # first line should end with a period
    "D401", # first line should be in imperative mood
    "D402", # first line should not be the function's "signature"
    "D403", # first word of the first line should be properly capitalized
    "D404", # first word of the docstring should not be This
    "D405", # section name should be properly capitalized
    "D406", # section name should end with a newline
    "D407", # missing dashed underline after section
    "D408", # section underline should be in the line following the section's name
    "D409", # section underline should match the length of its name
    "D414", # section has no content
    "D415", # first line should end with a period, question mark, or exclamation point
    "D416", # section name should end with a colon
    "D417", # missing argument descriptions in the docstring
    "D418", # found a blank line between function signature and docstring
    "D419", # found a docstring that is attached to nothing
]
exclude = [
    ".git",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "logs",
    "tmp",
    "alembic",
    "*.egg-info",
    "build",
    "dist",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = false
warn_unreachable = true
strict_equality = false
disallow_any_explicit = false
ignore_errors = false
ignore_missing_imports = true
local_partial_types = true
strict_optional = false
disable_error_code = ["valid-type", "misc"]
follow_imports = "silent"
exclude = [
    "\\.git",
    "\\.venv",
    "\\.mypy_cache",
    "\\.pytest_cache",
    "\\.ruff_cache",
    "logs",
    "tmp",
    "alembic",
    ".*\\.egg-info",
    "build",
    "dist",
]

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false


[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["web", "models", "services", "settings"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/alembic/*",
    "*/logs/*",
    "*/tmp/*",
    "*/.venv/*",
    "*/.mypy_cache/*",
    "*/.pytest_cache/*",
    "*/.ruff_cache/*",
    "*/*.egg-info/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = [
    "tests",
    "test_*",
    ".git",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "logs",
    "tmp",
    "alembic",
    "*.egg-info",
    "build",
    "dist",
]
skips = ["B101", "B601"]
